// Code generated by Microsoft (R) TypeSpec Code Generator.

package todo;

import io.clientcore.core.annotation.Metadata;
import io.clientcore.core.annotation.TypeConditions;
import io.clientcore.core.serialization.json.JsonReader;
import io.clientcore.core.serialization.json.JsonSerializable;
import io.clientcore.core.serialization.json.JsonToken;
import io.clientcore.core.serialization.json.JsonWriter;
import java.io.IOException;

/**
 * The CreateResponse model.
 */
@Metadata(conditions = { TypeConditions.IMMUTABLE })
public final class CreateResponse implements JsonSerializable<CreateResponse> {
    /*
     * An autogenerated unique id for the user
     */
    @Metadata(generated = true)
    private long id;

    /*
     * The user's username
     */
    @Metadata(generated = true)
    private final String username;

    /*
     * The user's email address
     */
    @Metadata(generated = true)
    private final String email;

    /*
     * The token to use to construct the validate email address url
     */
    @Metadata(generated = true)
    private final String token;

    /**
     * Creates an instance of CreateResponse class.
     * 
     * @param username the username value to set.
     * @param email the email value to set.
     * @param token the token value to set.
     */
    @Metadata(generated = true)
    private CreateResponse(String username, String email, String token) {
        this.username = username;
        this.email = email;
        this.token = token;
    }

    /**
     * Get the id property: An autogenerated unique id for the user.
     * 
     * @return the id value.
     */
    @Metadata(generated = true)
    public long getId() {
        return this.id;
    }

    /**
     * Get the username property: The user's username.
     * 
     * @return the username value.
     */
    @Metadata(generated = true)
    public String getUsername() {
        return this.username;
    }

    /**
     * Get the email property: The user's email address.
     * 
     * @return the email value.
     */
    @Metadata(generated = true)
    public String getEmail() {
        return this.email;
    }

    /**
     * Get the token property: The token to use to construct the validate email address url.
     * 
     * @return the token value.
     */
    @Metadata(generated = true)
    public String getToken() {
        return this.token;
    }

    /**
     * {@inheritDoc}
     */
    @Metadata(generated = true)
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("email", this.email);
        jsonWriter.writeStringField("token", this.token);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateResponse if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateResponse.
     */
    @Metadata(generated = true)
    public static CreateResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long id = 0L;
            String username = null;
            String email = null;
            String token = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getLong();
                } else if ("username".equals(fieldName)) {
                    username = reader.getString();
                } else if ("email".equals(fieldName)) {
                    email = reader.getString();
                } else if ("token".equals(fieldName)) {
                    token = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            CreateResponse deserializedCreateResponse = new CreateResponse(username, email, token);
            deserializedCreateResponse.id = id;

            return deserializedCreateResponse;
        });
    }
}
